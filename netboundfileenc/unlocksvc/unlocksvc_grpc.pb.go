// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package unlocksvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PasswordUnlockServiceClient is the client API for PasswordUnlockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PasswordUnlockServiceClient interface {
	// PostUnlockIntent registers an intent of obtaining unlocking password from a user.
	PostUnlockIntent(ctx context.Context, in *PostUnlockIntentRequest, opts ...grpc.CallOption) (*PostUnlockIntentResponse, error)
	// GetUnlockPassword retrieves an unlocking password a user has offered.
	GetUnlockPassword(ctx context.Context, in *GetUnlockPasswordRequest, opts ...grpc.CallOption) (*GetUnlockPasswordResponse, error)
}

type passwordUnlockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPasswordUnlockServiceClient(cc grpc.ClientConnInterface) PasswordUnlockServiceClient {
	return &passwordUnlockServiceClient{cc}
}

func (c *passwordUnlockServiceClient) PostUnlockIntent(ctx context.Context, in *PostUnlockIntentRequest, opts ...grpc.CallOption) (*PostUnlockIntentResponse, error) {
	out := new(PostUnlockIntentResponse)
	err := c.cc.Invoke(ctx, "/hzgllaitosunlocksvc.PasswordUnlockService/PostUnlockIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordUnlockServiceClient) GetUnlockPassword(ctx context.Context, in *GetUnlockPasswordRequest, opts ...grpc.CallOption) (*GetUnlockPasswordResponse, error) {
	out := new(GetUnlockPasswordResponse)
	err := c.cc.Invoke(ctx, "/hzgllaitosunlocksvc.PasswordUnlockService/GetUnlockPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasswordUnlockServiceServer is the server API for PasswordUnlockService service.
// All implementations must embed UnimplementedPasswordUnlockServiceServer
// for forward compatibility
type PasswordUnlockServiceServer interface {
	// PostUnlockIntent registers an intent of obtaining unlocking password from a user.
	PostUnlockIntent(context.Context, *PostUnlockIntentRequest) (*PostUnlockIntentResponse, error)
	// GetUnlockPassword retrieves an unlocking password a user has offered.
	GetUnlockPassword(context.Context, *GetUnlockPasswordRequest) (*GetUnlockPasswordResponse, error)
	mustEmbedUnimplementedPasswordUnlockServiceServer()
}

// UnimplementedPasswordUnlockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPasswordUnlockServiceServer struct {
}

func (UnimplementedPasswordUnlockServiceServer) PostUnlockIntent(context.Context, *PostUnlockIntentRequest) (*PostUnlockIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUnlockIntent not implemented")
}
func (UnimplementedPasswordUnlockServiceServer) GetUnlockPassword(context.Context, *GetUnlockPasswordRequest) (*GetUnlockPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnlockPassword not implemented")
}
func (UnimplementedPasswordUnlockServiceServer) mustEmbedUnimplementedPasswordUnlockServiceServer() {}

// UnsafePasswordUnlockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PasswordUnlockServiceServer will
// result in compilation errors.
type UnsafePasswordUnlockServiceServer interface {
	mustEmbedUnimplementedPasswordUnlockServiceServer()
}

func RegisterPasswordUnlockServiceServer(s grpc.ServiceRegistrar, srv PasswordUnlockServiceServer) {
	s.RegisterService(&PasswordUnlockService_ServiceDesc, srv)
}

func _PasswordUnlockService_PostUnlockIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUnlockIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordUnlockServiceServer).PostUnlockIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hzgllaitosunlocksvc.PasswordUnlockService/PostUnlockIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordUnlockServiceServer).PostUnlockIntent(ctx, req.(*PostUnlockIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordUnlockService_GetUnlockPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnlockPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordUnlockServiceServer).GetUnlockPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hzgllaitosunlocksvc.PasswordUnlockService/GetUnlockPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordUnlockServiceServer).GetUnlockPassword(ctx, req.(*GetUnlockPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PasswordUnlockService_ServiceDesc is the grpc.ServiceDesc for PasswordUnlockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PasswordUnlockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hzgllaitosunlocksvc.PasswordUnlockService",
	HandlerType: (*PasswordUnlockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostUnlockIntent",
			Handler:    _PasswordUnlockService_PostUnlockIntent_Handler,
		},
		{
			MethodName: "GetUnlockPassword",
			Handler:    _PasswordUnlockService_GetUnlockPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "unlocksvc/unlocksvc.proto",
}
